# coding=utf-8
from collections import OrderedDict
import datetime
import json
from django.utils.http import urlquote
from django.views.generic import DetailView
import pytz
from alatting_website.model.poster import Poster, PosterPage
from alatting_website.model.statistics import PosterStatistics
from utils.utils import Utils
from utils.db.utils import Utils as DBUtils


class PosterView(DetailView):
    model = Poster
    template_name = 'poster/show/poster.html'
    queryset = Poster.objects.filter(
        status=Poster.STATUS_PUBLISHED
    )

    def get_context_data(self, **kwargs):
        ctx = super(PosterView, self).get_context_data(**kwargs)
        pages = PosterPage.objects.filter(
            poster=self.object
        ).order_by('index')
        ctx['pages'] = pages
        ctx['index_page'] = pages.first()
        return ctx

    def set_life_time(self, obj):
        now = datetime.datetime.now(tz=pytz.utc)
        timezone = pytz.timezone(obj.lifetime_timezone)
        now = now.astimezone(timezone)
        day_now = now.strftime('%Y-%m-%d')
        obj.day_now = day_now
        hours_available = False
        hours_info = u'营业时间：'
        hours_details = OrderedDict()
        try:
            hours_all = json.loads(obj.lifetime_value,
                                   object_pairs_hook=OrderedDict)
            hours = None
            if obj.lifetime_type == Poster.LIFETIME_WEEKLY:
                """ e.g.
                {
                    "Wednesday": {"disabled": 1, "time_start": "",
                                "time_end": ""},
                    "Monday": {"time_start": "08:00:00", "enabled": 1,
                                "time_end": "18:00:00"},
                    "Tuesday": {"enabled": 1, "time_start": "08:00:00",
                                "time_end": "18:00:00"}
                }
                """
                # the lifetime value of hours must be json format,
                # auto generated by program
                weekday = now.strftime('%A')    # 'Monday', or 'Tuesday'
                hours = hours_all[weekday]
            elif obj.lifetime_type == Poster.LIFETIME_SPECIFIC_DAYS:
                """e.g.
                {
                "2015-11-20": {
                    "time_start": "08:00:00", "enabled": 1,
                    "time_end": "21:00:00",
                    "message": "Funding opening day and project demonstration"
                    }
                }
                """
                if day_now in hours_all.keys():
                    hours = hours_all[day_now]
            if hours:
                if 'enabled' in hours and hours['enabled']:
                    if 'time_start' in hours and hours['time_start']:
                        time_start = timezone.localize(
                            datetime.datetime.strptime(
                                day_now + ' ' + hours['time_start'],
                                '%Y-%m-%d %I:%M %p'
                            )
                        )
                        time_end = timezone.localize(
                            datetime.datetime.strptime(
                                day_now + ' ' + hours['time_end'],
                                '%Y-%m-%d %I:%M %p')
                        )
                        hours_info = 'Hours Today: %s - %s' % (
                            time_start.strftime('%I:%M %p'),
                            time_end.strftime('%I:%M %p')
                        )
                        if time_start <= now <= time_end:
                            hours_available = True

            # extract details of hours
            for day, day_hours in hours_all.items():
                if 'enabled' in day_hours and day_hours['enabled']:
                    if 'time_start' in day_hours and day_hours['time_start']:
                        hours_detail = u'%s - %s' % (
                            day_hours['time_start'], day_hours['time_end']
                        )
                    else:
                        hours_detail = '8:00 am - 6:00 pm'
                    if 'message'in day_hours and day_hours['message']:
                        hours_detail += '<br/>' + day_hours['message']
                else:
                    if 'time_start' in day_hours and day_hours['time_start']:
                        hours_detail = u'%s - %s (暂停营业)' % (
                            day_hours['time_start'],
                            day_hours['time_end']
                        )
                    else:
                        hours_detail = u'休息'
                hours_details[day] = hours_detail
        except ValueError:
                pass
        obj.hours_status = u'营业中' if hours_available else '休息'
        obj.hours = hours_info
        obj.hours_details = hours_details

    def update_statistics(self, obj):
        queryset = PosterStatistics.objects.filter(pk=obj.pk)
        fields = dict(views_count=1)
        if 'scan' in self.request.GET:
            fields['scans_count'] = 1
        DBUtils.increase_counts(queryset, fields)

    def get_object(self, queryset=None):
        obj = super(PosterView, self).get_object(queryset)
        self.set_life_time(obj)

        # tailor mobile format, if no mobile then copy phone
        if not obj.mobile and obj.phone:
            obj.mobile = obj.phone
        if len(obj.mobile) <= 10:
            obj.mobile = '%s-%s-%s' % (
                obj.mobile[:3], obj.mobile[3:6], obj.mobile[6:]
            )
        # prepare email content to send
        url_detail = '\nquote:\n"%s\n%s\n"' % (
            obj.short_description,
            Utils.get_current_url(self.request)
        )
        title = obj.logo_title
        obj.email_content = 'subject=%s&body=%s' % (
            'To: ' + urlquote(title, ''),
            urlquote(url_detail, '')
        )

        if not obj.poster_funs.all():
            obj.abutton_fun_enabled = 1
        else:
            obj.abutton_fun_enabled = 0

        user = self.request.user
        obj.abutton_like_enabled = 1
        obj.abutton_bookmark_enabled = 1
        obj.abutton_subscribe_enabled = 1

        if user.is_authenticated():
            if obj.poster_likes.all():
                obj.abutton_like_enabled = 0
            if obj.poster_favorites.all():
                obj.abutton_bookmark_enabled = 0
            if obj.poster_subscriptions.all():
                obj.abutton_subscribe_enabled = 0

            my_rating = obj.ratings.all()
            if my_rating:
                obj.my_rating = my_rating[0]

        return obj
