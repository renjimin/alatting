# coding=utf-8

from collections import OrderedDict
import datetime
import json
import logging
from django.core.urlresolvers import reverse
from django.http import Http404
from django.utils.http import urlquote
import pytz
from alatting_website.model.resource import Image
from alatting_website.model.statistics import PosterStatistics
from poster.forms import PosterCreateForm
from utils.constants import DAY_CN_NAME
from utils.file import read_template_file_content, handle_uploaded_file, \
    get_image_path, rotate_image
from utils.utils import Utils
from utils.db.utils import Utils as DBUtils
from django.core.exceptions import PermissionDenied
from django.shortcuts import get_object_or_404, redirect
from django.views.generic import DetailView, View, ListView, UpdateView, \
    CreateView
from alatting_website.model.poster import Poster, PosterPage, PosterKeyword
from alatting_website.models import CategoryKeyword, Template, Address


logger = logging.getLogger('common')


class PosterEditView(DetailView):
    model = PosterPage
    template_name = 'poster/mobile/edit/edit.html'

    def get_poster_object(self):
        poster = Poster.objects.filter(
            pk=self.kwargs.get('poster_pk'),
            creator=self.request.user
        ).first()
        if not poster:
            raise PermissionDenied
        self.poster = poster
        return poster

    def get_object(self, queryset=None):
        page = PosterPage.objects.filter(
            poster=self.poster,
            index=0
        ).first()
        return page

    def get(self, request, *args, **kwargs):
        poster = self.get_poster_object()
        page = self.get_object()
        if not page:
            re_url = reverse('posters:select_template', kwargs={
                'poster_pk': poster.id
            })
            re_url += '?back=0'
            return redirect(re_url)
        return super(PosterEditView, self).get(request, *args, **kwargs)

    def get_context_data(self, **kwargs):
        ctx = super(PosterEditView, self).get_context_data(**kwargs)
        ctx['poster'] = self.object.poster
        ctx['categorykeyword_list'] = CategoryKeyword.objects.filter(
            category_id=self.object.poster.sub_category_id
        ).order_by('verb', 'noun')
        return ctx


class PosterView(DetailView):
    model = Poster
    template_name = 'poster/mobile/show/poster.html'
    queryset = Poster.objects.filter(
        status=Poster.STATUS_PUBLISHED
    )

    def get_context_data(self, **kwargs):
        ctx = super(PosterView, self).get_context_data(**kwargs)
        pages = PosterPage.objects.filter(
            poster=self.object
        ).order_by('index')
        ctx['pages'] = pages
        ctx['index_page'] = pages.first()
        return ctx

    def set_life_time(self, obj):
        now = datetime.datetime.now(tz=pytz.utc)
        timezone = pytz.timezone(obj.lifetime_timezone)
        now = now.astimezone(timezone)
        day_now = now.strftime('%Y-%m-%d')
        obj.day_now = day_now
        hours_available = False
        hours_info = u'营业时间：'
        hours_details = OrderedDict()
        try:
            hours_all = json.loads(obj.lifetime_value,
                                   object_pairs_hook=OrderedDict)
            hours = None
            if obj.lifetime_type == Poster.LIFETIME_WEEKLY:
                """ e.g.
                {
                    "Wednesday": {"disabled": 1, "time_start": "",
                                "time_end": ""},
                    "Monday": {"time_start": "08:00:00", "enabled": 1,
                                "time_end": "18:00:00"},
                    "Tuesday": {"enabled": 1, "time_start": "08:00:00",
                                "time_end": "18:00:00"}
                }
                """
                # the lifetime value of hours must be json format,
                # auto generated by program
                weekday = now.strftime('%A')    # 'Monday', or 'Tuesday'
                hours = hours_all[weekday]
            elif obj.lifetime_type == Poster.LIFETIME_SPECIFIC_DAYS:
                """e.g.
                {
                "2015-11-20": {
                    "time_start": "08:00:00", "enabled": 1,
                    "time_end": "21:00:00",
                    "message": "Funding opening day and project demonstration"
                    }
                }
                """
                if day_now in hours_all.keys():
                    hours = hours_all[day_now]
            if hours:
                if 'enabled' in hours and hours['enabled']:
                    if 'start' in hours and hours['start']:
                        time_start = timezone.localize(
                            datetime.datetime.strptime(
                                day_now + ' ' + hours['start'],
                                '%Y-%m-%d %H:%M'
                            )
                        )
                        time_end = timezone.localize(
                            datetime.datetime.strptime(
                                day_now + ' ' + hours['end'],
                                '%Y-%m-%d %H:%M')
                        )
                        hours_info = '营业时间：%s - %s ' % (
                            time_start.strftime('%H:%M'),
                            time_end.strftime('%H:%M')
                        )
                        if time_start <= now <= time_end:
                            hours_available = True

            # extract details of hours
            for day, day_hours in hours_all.items():
                if 'enabled' in day_hours and day_hours['enabled']:
                    if 'start' in day_hours and day_hours['start']:
                        hours_detail = u'%s - %s' % (
                            day_hours['start'], day_hours['end']
                        )
                    else:
                        hours_detail = '8:00 am - 6:00 pm'
                    if 'message'in day_hours and day_hours['message']:
                        hours_detail += '<br/>' + day_hours['message']
                else:
                    if 'start' in day_hours and day_hours['start']:
                        hours_detail = u'%s - %s (暂停营业)' % (
                            day_hours['start'],
                            day_hours['end']
                        )
                    else:
                        hours_detail = u'休息'
                hours_details[day] = hours_detail
        except ValueError as e:
                logger.exception(e)
        obj.hours_status = u'营业中' if hours_available else '休息'
        obj.hours = hours_info
        obj.hours_details = hours_details
        self.trans_hours(obj)

    def trans_hours(self,obj):
        hours_details_cn = []
        for en, cn in DAY_CN_NAME:
            for day, value in obj.hours_details.items():
                if day == en:
                    hours_details_cn.append((cn, value.replace('am', '上午')))
        obj.hours_details_cn = hours_details_cn

    def update_statistics(self, obj):
        queryset = PosterStatistics.objects.filter(pk=obj.pk)
        fields = dict(views_count=1)
        if 'scan' in self.request.GET:
            fields['scans_count'] = 1
        DBUtils.increase_counts(queryset, fields)

    def get_object(self, queryset=None):
        obj = super(PosterView, self).get_object(queryset)
        self.set_life_time(obj)

        # tailor mobile format, if no mobile then copy phone
        if not obj.mobile and obj.phone:
            obj.mobile = obj.phone
        if len(obj.mobile) <= 10:
            obj.mobile = '%s-%s-%s' % (
                obj.mobile[:3], obj.mobile[3:6], obj.mobile[6:]
            )
        # prepare email content to send
        url_detail = '\nquote:\n"%s\n%s\n"' % (
            obj.short_description,
            Utils.get_current_url(self.request)
        )
        title = obj.logo_title
        obj.email_content = 'subject=%s&body=%s' % (
            'To: ' + urlquote(title, ''),
            urlquote(url_detail, '')
        )

        if not obj.poster_funs.all():
            obj.abutton_fun_enabled = 1
        else:
            obj.abutton_fun_enabled = 0

        user = self.request.user
        obj.abutton_like_enabled = 1
        obj.abutton_bookmark_enabled = 1
        obj.abutton_subscribe_enabled = 1

        if user.is_authenticated():
            if obj.poster_likes.all():
                obj.abutton_like_enabled = 0
            if obj.poster_favorites.all():
                obj.abutton_bookmark_enabled = 0
            if obj.poster_subscriptions.all():
                obj.abutton_subscribe_enabled = 0

            my_rating = obj.ratings.all()
            if my_rating:
                obj.my_rating = my_rating[0]

        self.update_statistics(obj)
        return obj


class CategoryKeywordsView(ListView):
    model = CategoryKeyword
    template_name = 'poster/mobile/create/keywords.html'
    queryset = CategoryKeyword.objects.all()

    def get_queryset(self):
        qs = super(CategoryKeywordsView, self).get_queryset()

        return qs.filter(
            category_id=self.request.GET.get('sub_category_id')
        ).order_by('verb', 'noun')


class PosterFormViewMixin(object):
    model = Poster
    form_class = PosterCreateForm

    def get_success_url(self):
        return '%s?role=creator' % (
            reverse('survey:start', kwargs={'poster_id': self.object.id})
        )

    def update_poster_keywords(self):
        keywords = self.request.POST.get('keywords', '').split(',')
        try:
            PosterKeyword.objects.filter(
                poster=self.object
            ).delete()
            for kid in keywords:
                keyword = get_object_or_404(CategoryKeyword, id=kid)
                PosterKeyword.objects.create(
                    poster=self.object,
                    category_keyword=keyword
                )
        except:
            pass

    def post_method(self, request):
        form = self.get_form()
        upfile = request.FILES.get('logo', None)
        if upfile:
            image_obj = Image()
            save_path = get_image_path(image_obj, upfile.name)
            full_path = handle_uploaded_file(save_path, upfile)
            image_obj.file = save_path
            image_obj.save()
            rotate_image(full_path)
            form.instance.logo_image = image_obj
        if form.is_valid():
            resp = self.form_valid(form)
            self.update_poster_keywords()
            return resp
        else:
            return self.form_invalid(form)


class CreateFormView(PosterFormViewMixin, CreateView):
    template_name = 'poster/mobile/create/base-form.html'

    def get_initial(self):
        req_get = self.request.GET
        main_category_id = req_get.get('main_category_id')
        sub_category_id = req_get.get('sub_category_id')
        keywords = req_get.get('category_keyword_id')
        cate = req_get.get('cate')
        subcate = req_get.get('subcate')
        return {
            'main_category_id': main_category_id,
            'sub_category_id': sub_category_id,
            'keywords': keywords,
            'cate': cate,
            'subcate': subcate
        }

    def form_valid(self, form):
        address = Address()
        address.address1 = self.request.POST.get('address_text')
        address.save()
        address.refresh_from_db()
        obj = form.instance
        obj.main_category_id = self.request.POST.get('main_category_id')
        obj.sub_category_id = self.request.POST.get('sub_category_id')
        obj.creator = self.request.user
        obj.status = Poster.STATUS_DRAFT
        obj.address = address
        return super(CreateFormView, self).form_valid(form)

    def post(self, request, *args, **kwargs):
        self.object = None
        return self.post_method(request)


class UpdateFormView(PosterFormViewMixin, UpdateView):
    template_name = 'poster/mobile/create/base-form.html'

    def get_initial(self):
        keywords = PosterKeyword.objects.filter(
            poster=self.object
        ).values_list('category_keyword_id', flat=True)

        return {
            'main_category_id': self.object.main_category_id,
            'sub_category_id': self.object.sub_category_id,
            'keywords': ','.join(str(key) for key in keywords),
            'cate': self.object.main_category.name,
            'subcate': self.object.sub_category.name,
            'address_text': self.object.address.address1
        }

    def form_valid(self, form):
        obj = form.instance
        address = Address.objects.filter(
            address1=obj.address
        ).first()
        address_text = self.request.POST.get('address_text', '')
        if address.address1 != address_text:
            address = Address()
            address.address1 = address_text
            address.save()
            address.refresh_from_db()
            obj.address = address
        return super(UpdateFormView, self).form_valid(form)

    def post(self, request, *args, **kwargs):
        self.object = self.get_object()
        return self.post_method(request)


class SelectTemplateView(ListView):
    model = Template
    template_name = 'poster/mobile/create/select-template.html'
    queryset = Template.objects.filter(
        data_status=Template.USABLE
    ).order_by('name')

    def get_poster_object(self):
        return get_object_or_404(Poster, pk=self.kwargs.get('poster_pk'))

    def get_queryset(self):
        poster = self.get_poster_object()
        if poster.creator != self.request.user:
            raise PermissionDenied
        return super(SelectTemplateView, self).get_queryset()

    def get_context_data(self, **kwargs):
        ctx = super(SelectTemplateView, self).get_context_data(**kwargs)
        ctx['poster_id'] = self.kwargs.get('poster_pk')
        return ctx


class PosterPageCreateView(View):

    def post(self, request, *args, **kwargs):
        poster_id = request.POST.get('poster_id')
        template_id = request.POST.get('template_id')
        pages = PosterPage.objects.filter(
            poster__creator=self.request.user,
            poster_id=poster_id, template_id=template_id
        ).order_by('-index')
        template = get_object_or_404(Template, pk=template_id)
        if pages.exists():
            index = int(pages.first().index) + 1
        else:
            index = 0

        html = read_template_file_content(template.html_path())
        css = read_template_file_content(template.css_path())
        js = read_template_file_content(template.js_path())
        posterpage = PosterPage.objects.create(
            poster_id=poster_id,
            template_id=template_id,
            index=index,
            name="p%s_t%s_i%s" % (poster_id, template_id, index),
            temp_html=html,
            temp_css=css,
            temp_script=js
        )
        posterpage.check_and_create_static_file_dir()
        return redirect(reverse('posters:edit',
                                kwargs={
                                    'poster_pk': poster_id
                                }))